// <auto-generated />
using System;
using LibraryManagmentSystemIdentity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagmentSystemIdentity.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250218151059_books")]
    partial class books
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.AuthorsModel", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorName = "J.K. Rowling",
                            Bio = "Author of Harry Potter series",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 2,
                            AuthorName = "George Orwell",
                            Bio = "Author of 1984 & Animal Farm",
                            BirthDate = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1950, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 3,
                            AuthorName = "Mark Twain",
                            Bio = "Author of Tom Sawyer",
                            BirthDate = new DateTime(1835, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1910, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 4,
                            AuthorName = "J.R.R. Tolkien",
                            Bio = "Lord of the Rings",
                            BirthDate = new DateTime(1892, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1973, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 5,
                            AuthorName = "Stephen King",
                            Bio = "Horror fiction writer",
                            BirthDate = new DateTime(1947, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 6,
                            AuthorName = "Ernest Hemingway",
                            Bio = "Author of The Old Man and The Sea",
                            BirthDate = new DateTime(1899, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1961, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 7,
                            AuthorName = "F. Scott Fitzgerald",
                            Bio = "The Great Gatsby",
                            BirthDate = new DateTime(1896, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1940, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 8,
                            AuthorName = "Agatha Christie",
                            Bio = "Queen of Crime",
                            BirthDate = new DateTime(1890, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1976, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 9,
                            AuthorName = "Leo Tolstoy",
                            Bio = "War and Peace",
                            BirthDate = new DateTime(1828, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1910, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AuthorId = 10,
                            AuthorName = "Jane Austen",
                            Bio = "Pride and Prejudice",
                            BirthDate = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadDate = new DateTime(1817, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.BooksModel", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            BookName = "Harry Potter",
                            Description = "Magic story"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            BookName = "1984",
                            Description = "Dystopian fiction"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 2,
                            BookName = "Animal Farm",
                            Description = "Political satire"
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            BookName = "The Hobbit",
                            Description = "Fantasy novel"
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            BookName = "The Shining",
                            Description = "Horror story"
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 8,
                            BookName = "Murder on the Orient Express",
                            Description = "Detective novel"
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 10,
                            BookName = "Pride and Prejudice",
                            Description = "Romantic novel"
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 7,
                            BookName = "The Great Gatsby",
                            Description = "American classic"
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 9,
                            BookName = "War and Peace",
                            Description = "Historical fiction"
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 6,
                            BookName = "The Old Man and The Sea",
                            Description = "Adventure novel"
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 7,
                            BookName = "The Catcher in the Rye",
                            Description = "Coming-of-age novel"
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 4,
                            BookName = "The Lord of the Rings",
                            Description = "Epic high fantasy"
                        },
                        new
                        {
                            BookId = 13,
                            AuthorId = 2,
                            BookName = "Brave New World",
                            Description = "Dystopian science fiction"
                        },
                        new
                        {
                            BookId = 14,
                            AuthorId = 2,
                            BookName = "Fahrenheit 451",
                            Description = "Dystopian novel about censorship"
                        },
                        new
                        {
                            BookId = 15,
                            AuthorId = 5,
                            BookName = "Dracula",
                            Description = "Gothic horror"
                        },
                        new
                        {
                            BookId = 16,
                            AuthorId = 5,
                            BookName = "Frankenstein",
                            Description = "Gothic science fiction"
                        },
                        new
                        {
                            BookId = 17,
                            AuthorId = 5,
                            BookName = "The Picture of Dorian Gray",
                            Description = "Philosophical novel"
                        },
                        new
                        {
                            BookId = 18,
                            AuthorId = 4,
                            BookName = "The Chronicles of Narnia",
                            Description = "Fantasy novel series"
                        },
                        new
                        {
                            BookId = 19,
                            AuthorId = 2,
                            BookName = "The Hitchhiker's Guide to the Galaxy",
                            Description = "Comic science fiction"
                        },
                        new
                        {
                            BookId = 20,
                            AuthorId = 1,
                            BookName = "Alice's Adventures in Wonderland",
                            Description = "Fantasy novel"
                        },
                        new
                        {
                            BookId = 21,
                            AuthorId = 10,
                            BookName = "Wuthering Heights",
                            Description = "Gothic fiction"
                        },
                        new
                        {
                            BookId = 22,
                            AuthorId = 5,
                            BookName = "Gone with the Wind",
                            Description = "Historical fiction"
                        },
                        new
                        {
                            BookId = 23,
                            AuthorId = 9,
                            BookName = "A Tale of Two Cities",
                            Description = "Historical novel"
                        },
                        new
                        {
                            BookId = 24,
                            AuthorId = 6,
                            BookName = "The Sun Also Rises",
                            Description = "Modernist novel"
                        },
                        new
                        {
                            BookId = 25,
                            AuthorId = 7,
                            BookName = "To Kill a Mockingbird",
                            Description = "Southern Gothic fiction"
                        },
                        new
                        {
                            BookId = 26,
                            AuthorId = 1,
                            BookName = "The Kite Runner",
                            Description = "Historical fiction"
                        },
                        new
                        {
                            BookId = 27,
                            AuthorId = 8,
                            BookName = "The Book Thief",
                            Description = "Historical fiction"
                        },
                        new
                        {
                            BookId = 28,
                            AuthorId = 2,
                            BookName = "Slaughterhouse-Five",
                            Description = "Anti-war science fiction"
                        },
                        new
                        {
                            BookId = 29,
                            AuthorId = 3,
                            BookName = "The Great Expectations",
                            Description = "Victorian novel"
                        },
                        new
                        {
                            BookId = 30,
                            AuthorId = 3,
                            BookName = "Moby-Dick",
                            Description = "Epic sea adventure"
                        },
                        new
                        {
                            BookId = 31,
                            AuthorId = 9,
                            BookName = "Les Misérables",
                            Description = "Historical novel"
                        },
                        new
                        {
                            BookId = 32,
                            AuthorId = 7,
                            BookName = "Catch-22",
                            Description = "Satirical novel"
                        },
                        new
                        {
                            BookId = 33,
                            AuthorId = 1,
                            BookName = "The Fault in Our Stars",
                            Description = "Young adult novel"
                        },
                        new
                        {
                            BookId = 34,
                            AuthorId = 8,
                            BookName = "The Alchemist",
                            Description = "Philosophical fiction"
                        },
                        new
                        {
                            BookId = 35,
                            AuthorId = 4,
                            BookName = "The Secret Garden",
                            Description = "Children's novel"
                        },
                        new
                        {
                            BookId = 36,
                            AuthorId = 2,
                            BookName = "The Godfather",
                            Description = "Crime novel"
                        },
                        new
                        {
                            BookId = 37,
                            AuthorId = 6,
                            BookName = "The Road",
                            Description = "Post-apocalyptic novel"
                        },
                        new
                        {
                            BookId = 38,
                            AuthorId = 5,
                            BookName = "Shogun",
                            Description = "Historical novel"
                        },
                        new
                        {
                            BookId = 39,
                            AuthorId = 2,
                            BookName = "The Handmaid's Tale",
                            Description = "Dystopian novel"
                        },
                        new
                        {
                            BookId = 40,
                            AuthorId = 1,
                            BookName = "The Girl on the Train",
                            Description = "Psychological thriller"
                        });
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.CollegesModel", b =>
                {
                    b.Property<int>("CollegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollegeId"));

                    b.Property<string>("CollegeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollegeId");

                    b.ToTable("Colleges");

                    b.HasData(
                        new
                        {
                            CollegeId = 1,
                            CollegeAddress = "Cambridge, MA",
                            CollegeEmail = "info@harvard.edu",
                            CollegeName = "Harvard University"
                        },
                        new
                        {
                            CollegeId = 2,
                            CollegeAddress = "Cambridge, MA",
                            CollegeEmail = "contact@mit.edu",
                            CollegeName = "MIT"
                        },
                        new
                        {
                            CollegeId = 3,
                            CollegeAddress = "Stanford, CA",
                            CollegeEmail = "info@stanford.edu",
                            CollegeName = "Stanford University"
                        },
                        new
                        {
                            CollegeId = 4,
                            CollegeAddress = "Oxford, UK",
                            CollegeEmail = "admin@ox.ac.uk",
                            CollegeName = "Oxford University"
                        },
                        new
                        {
                            CollegeId = 5,
                            CollegeAddress = "Cambridge, UK",
                            CollegeEmail = "info@cam.ac.uk",
                            CollegeName = "Cambridge University"
                        });
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.StudentBooksModel", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("BorrowedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("StudentBooks");
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.StudentsModel", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<string>("StudentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentAge")
                        .HasColumnType("int");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("CollegeId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CollegeId = 1,
                            StudentAddress = "NYC",
                            StudentAge = 21,
                            StudentEmail = "alice@email.com",
                            StudentName = "Alice Johnson",
                            StudentPhone = "1234567890"
                        },
                        new
                        {
                            StudentId = 2,
                            CollegeId = 2,
                            StudentAddress = "Boston",
                            StudentAge = 22,
                            StudentEmail = "bob@email.com",
                            StudentName = "Bob Smith",
                            StudentPhone = "9876543210"
                        },
                        new
                        {
                            StudentId = 3,
                            CollegeId = 3,
                            StudentAddress = "Los Angeles",
                            StudentAge = 23,
                            StudentEmail = "charlie@email.com",
                            StudentName = "Charlie Brown",
                            StudentPhone = "1122334455"
                        },
                        new
                        {
                            StudentId = 4,
                            CollegeId = 4,
                            StudentAddress = "Chicago",
                            StudentAge = 24,
                            StudentEmail = "david@email.com",
                            StudentName = "David Williams",
                            StudentPhone = "2233445566"
                        },
                        new
                        {
                            StudentId = 5,
                            CollegeId = 5,
                            StudentAddress = "Miami",
                            StudentAge = 25,
                            StudentEmail = "emma@email.com",
                            StudentName = "Emma Davis",
                            StudentPhone = "3344556677"
                        },
                        new
                        {
                            StudentId = 6,
                            CollegeId = 1,
                            StudentAddress = "Seattle",
                            StudentAge = 26,
                            StudentEmail = "fayla@email.com",
                            StudentName = "Fayla Clark",
                            StudentPhone = "4455667788"
                        },
                        new
                        {
                            StudentId = 7,
                            CollegeId = 2,
                            StudentAddress = "Dallas",
                            StudentAge = 27,
                            StudentEmail = "george@email.com",
                            StudentName = "George Martin",
                            StudentPhone = "5566778899"
                        },
                        new
                        {
                            StudentId = 8,
                            CollegeId = 3,
                            StudentAddress = "San Francisco",
                            StudentAge = 28,
                            StudentEmail = "hannah@email.com",
                            StudentName = "Hannah Lee",
                            StudentPhone = "6677889900"
                        },
                        new
                        {
                            StudentId = 9,
                            CollegeId = 4,
                            StudentAddress = "Houston",
                            StudentAge = 29,
                            StudentEmail = "isaac@email.com",
                            StudentName = "Isaac Parker",
                            StudentPhone = "7788990011"
                        },
                        new
                        {
                            StudentId = 10,
                            CollegeId = 5,
                            StudentAddress = "Austin",
                            StudentAge = 30,
                            StudentEmail = "jessica@email.com",
                            StudentName = "Jessica Allen",
                            StudentPhone = "8899001122"
                        },
                        new
                        {
                            StudentId = 11,
                            CollegeId = 1,
                            StudentAddress = "Denver",
                            StudentAge = 21,
                            StudentEmail = "kevin@email.com",
                            StudentName = "Kevin Scott",
                            StudentPhone = "9900112233"
                        },
                        new
                        {
                            StudentId = 12,
                            CollegeId = 2,
                            StudentAddress = "Philadelphia",
                            StudentAge = 22,
                            StudentEmail = "laura@email.com",
                            StudentName = "Laura Walker",
                            StudentPhone = "1011121314"
                        },
                        new
                        {
                            StudentId = 13,
                            CollegeId = 3,
                            StudentAddress = "Phoenix",
                            StudentAge = 23,
                            StudentEmail = "matthew@email.com",
                            StudentName = "Matthew Hall",
                            StudentPhone = "1213141516"
                        },
                        new
                        {
                            StudentId = 14,
                            CollegeId = 4,
                            StudentAddress = "Boston",
                            StudentAge = 24,
                            StudentEmail = "nancy@email.com",
                            StudentName = "Nancy Allen",
                            StudentPhone = "1415161718"
                        },
                        new
                        {
                            StudentId = 15,
                            CollegeId = 5,
                            StudentAddress = "Chicago",
                            StudentAge = 25,
                            StudentEmail = "oliver@email.com",
                            StudentName = "Oliver Young",
                            StudentPhone = "1617181920"
                        },
                        new
                        {
                            StudentId = 16,
                            CollegeId = 1,
                            StudentAddress = "Seattle",
                            StudentAge = 26,
                            StudentEmail = "paul@email.com",
                            StudentName = "Paul Harris",
                            StudentPhone = "1819202122"
                        },
                        new
                        {
                            StudentId = 17,
                            CollegeId = 2,
                            StudentAddress = "Los Angeles",
                            StudentAge = 27,
                            StudentEmail = "quincy@email.com",
                            StudentName = "Quincy Lee",
                            StudentPhone = "2021222324"
                        },
                        new
                        {
                            StudentId = 18,
                            CollegeId = 3,
                            StudentAddress = "San Francisco",
                            StudentAge = 28,
                            StudentEmail = "rachel@email.com",
                            StudentName = "Rachel Nelson",
                            StudentPhone = "2223242526"
                        },
                        new
                        {
                            StudentId = 19,
                            CollegeId = 4,
                            StudentAddress = "Houston",
                            StudentAge = 29,
                            StudentEmail = "samuel@email.com",
                            StudentName = "Samuel Green",
                            StudentPhone = "2425262728"
                        },
                        new
                        {
                            StudentId = 20,
                            CollegeId = 5,
                            StudentAddress = "Dallas",
                            StudentAge = 30,
                            StudentEmail = "tina@email.com",
                            StudentName = "Tina Carter",
                            StudentPhone = "2627282930"
                        },
                        new
                        {
                            StudentId = 21,
                            CollegeId = 1,
                            StudentAddress = "Phoenix",
                            StudentAge = 21,
                            StudentEmail = "ursula@email.com",
                            StudentName = "Ursula King",
                            StudentPhone = "2829303132"
                        },
                        new
                        {
                            StudentId = 22,
                            CollegeId = 2,
                            StudentAddress = "Miami",
                            StudentAge = 22,
                            StudentEmail = "victor@email.com",
                            StudentName = "Victor Adams",
                            StudentPhone = "3031323334"
                        },
                        new
                        {
                            StudentId = 23,
                            CollegeId = 3,
                            StudentAddress = "Austin",
                            StudentAge = 23,
                            StudentEmail = "wendy@email.com",
                            StudentName = "Wendy Turner",
                            StudentPhone = "3233343536"
                        },
                        new
                        {
                            StudentId = 24,
                            CollegeId = 4,
                            StudentAddress = "Philadelphia",
                            StudentAge = 24,
                            StudentEmail = "xander@email.com",
                            StudentName = "Xander Morris",
                            StudentPhone = "3435363738"
                        },
                        new
                        {
                            StudentId = 25,
                            CollegeId = 5,
                            StudentAddress = "San Francisco",
                            StudentAge = 25,
                            StudentEmail = "yara@email.com",
                            StudentName = "Yara Phillips",
                            StudentPhone = "3637383940"
                        },
                        new
                        {
                            StudentId = 26,
                            CollegeId = 1,
                            StudentAddress = "New York",
                            StudentAge = 26,
                            StudentEmail = "zane@email.com",
                            StudentName = "Zane Harris",
                            StudentPhone = "3839404142"
                        },
                        new
                        {
                            StudentId = 27,
                            CollegeId = 2,
                            StudentAddress = "Los Angeles",
                            StudentAge = 27,
                            StudentEmail = "amy@email.com",
                            StudentName = "Amy Jenkins",
                            StudentPhone = "4041424344"
                        },
                        new
                        {
                            StudentId = 28,
                            CollegeId = 3,
                            StudentAddress = "Chicago",
                            StudentAge = 28,
                            StudentEmail = "brandon@email.com",
                            StudentName = "Brandon Turner",
                            StudentPhone = "4243444546"
                        },
                        new
                        {
                            StudentId = 29,
                            CollegeId = 4,
                            StudentAddress = "Boston",
                            StudentAge = 29,
                            StudentEmail = "christina@email.com",
                            StudentName = "Christina Miller",
                            StudentPhone = "4445464748"
                        },
                        new
                        {
                            StudentId = 30,
                            CollegeId = 5,
                            StudentAddress = "Seattle",
                            StudentAge = 30,
                            StudentEmail = "dylan@email.com",
                            StudentName = "Dylan Evans",
                            StudentPhone = "4647484950"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.BooksModel", b =>
                {
                    b.HasOne("LibraryManagmentSystemIdentity.Models.AuthorsModel", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.StudentBooksModel", b =>
                {
                    b.HasOne("LibraryManagmentSystemIdentity.Models.BooksModel", "Book")
                        .WithMany("StudentBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagmentSystemIdentity.Models.StudentsModel", "Student")
                        .WithMany("StudentBooks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.StudentsModel", b =>
                {
                    b.HasOne("LibraryManagmentSystemIdentity.Models.CollegesModel", "College")
                        .WithMany("Students")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.AuthorsModel", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.BooksModel", b =>
                {
                    b.Navigation("StudentBooks");
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.CollegesModel", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("LibraryManagmentSystemIdentity.Models.StudentsModel", b =>
                {
                    b.Navigation("StudentBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
